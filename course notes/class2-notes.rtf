{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs32 \cf0 Part 2\
\
slide 1: opening\
\
slide 2: rules review, super quick recap of what we did last time\
\
-general history of ux\
-some general philosophy\
-getting data and using it\
-user testing basics\
\
slide 3: \
\
agenda\
\
slide 4:\
[what's a persona and why make one?]\
\
Last time we talked a bit about the various kinds of metrics that will influence your designs going forward. The problem is that metrics are often abstract, and design is a concrete process. Obviously there is no substitute for the real live feedback of real live users. But you can\'92t have users in your design planning meetings. Sometimes getting user feedback isn\'92t applicable or practical at that particular moment.  This is where personas come in. \
\
I will just say that personas are one of those things that I think a lot people think of as 'doing ux'. This isn't true. You can very successfully use ux methods on a project with personas never even entering the equation.\
\
Like any tool, personas aren't a perfect solution to every problem. They're helpful in the right situation though.\
\
\
[zoidberg]\
\
So what is a persona? A persona is a fictitious person, created as a stand-in for your actual users. Personas share characteristics of your actual users based on research and knowledge that you already have about them. Personas are beneficial because they help keep you and your teammates focused on the goals and needs of your users.\
\
This is one that I made during a hackathon my company participated in last fall. We didn't have direct access to users at the time, but we did have some lead-up time to do research. The personas helped us sell the process to the judges, and also helped drive our design decisions.\
\
slide 5:\
[proto persona]\
\
Proto-personas are a variant of the typical persona, with the important difference that they are not initially the result of user research. Instead, they originate from brainstorming workshops where company participants try to encapsulate the organization\'92s beliefs (based on their domain expertise and gut feeling) about who is using their product or service and what is motivating them to do so. Proto-personas give an organization a starting point from which to begin evaluating their products and to create some early design hypotheses. They\'92re also helpful in initiating and reinforcing corporate awareness of the customer\'92s point of view to ensure it\'92s included in strategic planning. This is especially true when the creators of these proto-personas are in a position to affect the company\'92s strategic direction.\
\
slide 6: \
[creating a persona]\
\
This all sounds good, so how do you go about creating this imaginary friend? You can make someone up out of the blue, but with no basis in facts, the persona will probably do little good for your project.\
\
slide 7:\
\
[win state]\
\
First, you have to determine what constitutes a \'91win\'92 state in your app. What tasks constitute successful use? For example, for an application i used to work on, our expert users would be successfully serving ads and making use of a variety of our advanced tools. Intermediate users might be serving ads but we know that they rely on our help staff for configuration assistance. Beginners might think we\'92re google adsense. But in any case. Before we can paint a portrait of a user doing things well, doing them okay, or completely failing in our app, we have to decide what doing well, doing okay, or failing even mean to us.\
\
slide 8:\
[4 levels]\
\
To figure out what your definition of different types of users are, make a list of tasks that someone can do in your site. Organize them by difficulty, and you\'92ll start to see patterns emerge. You\'92ll recognize your users. I generally look to create personas representing at least 3 or 4 levels of familiarity with my system.\
\
The next thing to consider is the level of comfort and skill that these users have with other systems, among other characteristics. \
\
slide 9:\
[a variety of characteristics]\
\
Let\'92s say you\'92re designing an accounting application. You might have an expert accountant like this dude here. He looks like he\'92s a serious badass with a pen and paper, but let\'92s suppose he\'92s not very good with Windows 7, the platform on which you\'92re developing your application. I know this is a weird example, but just go with it.\
\
\
Expert knowledge in one area does not necessarily equate to expert status across the board. This is why I generally like to create a spectrum of personas, with varying skillsets and comfort with different technologies as well as familiarity with the tasks of my system. Each and every one of them has been useful for making design decisions. \
\
slide 10:\
[complexities of users]\
\
Since all good things begin with spreadsheets, here\'92s an example of how you might go about beginning to create a spectrum of users with different combinations of skill levels and roles in your application. This is a pretty simplistic example.\
\
\
slide 11:\
[how to do it]\
\
This piece is a little bit of imagination and artistry. I tend to merge together a few different real live users that I\'92ve met or heard about second hand through colleagues or clients. \
\
It\'92s important to have this piece though, to assist you in thinking about your users and their motivations and frame of mind when they\'92re using your app. If it\'92s a mobile app, for example, are they yelling at their kids and trying to drive? (ehh well, I hope not. But you get the idea.) Maybe your user is using this app in the field and she\'92s juggling phone calls and data entry. Maybe she\'92s snoozing in a cubicle, and she hates her boss because she\'92s doing customer service part time while she\'92s trying to make her big break into the acting world. Ok, so these are possibly unrealistically flamboyant examples. \
\
But possibly not. One thing I\'92ve learned over the years is not to underestimate the wildness and fabulousness of my users, because reality is usually crazier than fiction. \
\
My point being that these details help you think about things from the user\'92s point of view.\
\
slide 12:\
[make a template]\
\
Let\'92s go back up to my persona, Zoidberg, for a moment. In my shop, we do agile ux so we didn\'92t spend time making our personas quite as detailed as we might have in a different sort of environment. \
\
This is an example of a persona for an administrator with expert domain knowledge. \
Some of the things we made sure to define included: age, physical location, and whether or not the person\'92s use of the application was mandatory or discretionary. For your project, it might make sense to include different aspects about your user.\
\
whatever else you do or do not choose to include in your template, it should at least cover the following:\
\
Name\
Job title\
Technical comfort\
Location\
Industry knowledge\
\
The only way to know what other characteristics you might want to know about your users will be by knowing the project you\'92re applying them to, so unfortunately this can be a somewhat vague process. There\'92s no global persona that will always work for every project. But I can tell you this- include your client or other stakeholders in the discussion as you flesh these out. They have invaluable knowledge to help guide you through this process.\
\
slide 13:\
[exercise]\
\
big stickies and markers\
\
slide 14:\
[determining when you have a problem]\
\
So we've been talking about becoming more intimately familiar with your target users. We\'92ve also talked about implementing metrics reporting and other methods, as well as how to get started with user testing. All of this activity was to help you determine what users are actually doing on your site, and it was for the end goal of determining whether you have any problems. \
\
This is really the meat and potatoes of UX. Anything you design ever is going to have problems. Finding and fixing them is the name of the game.\
\
slide 15:\
[what does a usability problem look like?]\
\
So what does a usability problem look like? How do you know when you\'92re seeing one? \
\
The biggest giveaway is any point when you see or hear a user expressing frustration, or is unable to complete a task.\
\
slide 16:\
[frustration]\
\
When you\'92re working with a user in person or via a remote test, it\'92s pretty easy to see when this happens. I would hope that most of us are able to understand the social cues involved with a frustrated individual. Frowning, fidgeting, seeming tense, or, quite possibly, simply stating to you as the UX researcher, \'91I\'92m feeling frustrated\'92. \
\
slide 17:\
[cnn]\
\
When you\'92re looking at metrics or click data, there are some other telltale signs to look for. \
This screen was kindly provided by CNN from a whitepaper they published about one of their recentish redesigns. It demonstrates an anti-pattern known as \'91deadspace\'92. You can see everyone is clicking all around but not in this area down here.\
\
Another pattern to watch for is excessive aimless clicking in random places on the page. Sometimes people click randomly when they don\'92t know where to go next, or when things that aren\'92t clickable look clickable. Also, when things that *are* clickable do not look clickable. It\'92s a general indicator that they aren\'92t getting the scent. Here\'92s an example of  a heatmap with very focused clicking, which indicates that users are navigating through very successfully.\
\
Scrolling up and down (also known as ping-ponging), or the worst of all, closing the window and clicking away. Whatever it is you\'92re trying to do, you don\'92t want your users to give up and leave.\
\
\
This is something you can determine whether you\'92re working with a user in person, remotely over a tool like skype, or looking at metrics. How long are people spending on your pages?\
\
If they\'92re content pages, spending a long time can be a good thing- you do want people to linger and read your important content. But what if it\'92s a task completion page, or a call to action page? If users aren\'92t finding and completing that action that you want them to do within a reasonable period of time, that\'92s a big red flag.\
\
slide 18:\
[start with the obvious]\
\
Some examples:\
Is your theme an eye-watering yellow?\
or maybe you have a beautiful parallax scrolling navigation scheme, but your users aren\'92t comfortable scrolling.\
\
This is a quick visual  reminder that certain colors can constitute a usability problem. And not just with older sites, pretty, visually appealing new sites sometimes fall into this trap as well. I don\'92t want to pick on made by water, he clearly does gorgeous work. And portfolio sites are often avant garde, but this was the first yellow site I could think of. Clicking around, it\'92s kind of disorienting. And if you as a designer had just fallen in love with this color palette, you might not have the distance to see that it could be a problem.\
\
slide 19:\
[missing anything?]\
\
One of the first things a user will be able to tell you is that you might be missing something basic. Here are some classic oversights:\
\
Can they tell who you are and what you do from the homepage?\
Does it answer all the basic questions you\'92d expect them to ask?\
Is there a clear call to action?\
Can they figure out how to contact you?\
How the heck do I log in?\
\
I can pick on adzerk because i love them and they love me. But this was the #1 usability problem during my time there. And it's still not fixed.\
\
slide 20:\
[listen for the negative]\
\
When working with users in person, there are some language cues to be especially tuned in to. listen for things like,\
\
I can\'92t read that font\
Those colors are hard to see\
I can\'92t get out of here\
\
People often want to be nice, polite, and kind. So they may not call a problem like they see it. Listen for negative words, or action words that imply a stopping, dead end, or lack of direction. Words like \'91can\'92t\'92, \'91unsure\'92, \'91what\'92. \
\
\
slide 21:\
[listen for uncertainty]\
\
Also listen for words that are questioning. If your user flow is working as expected, your user should have a pretty clear idea of where they need to go next. Indecisiveness can indicate a problem.\
\
this is just beginning to gloss over the surface of finding problems. You start with the biggest most glaring holes and go from there, but how do you get more subtle? \
\
slide 22:\
[talk to people]\
\
this is one of those things that might seem like it should fall into the category of extremely obvious, but once you're immersed in the culture of an organization, it can be a  challenge. it's extremely important, and one of the best things you can do to advocate for ux in your organization, is to facilitate communication between groups. Break out of the mold of the normal people you interact with, and go talk to people who do different jobs. Talk to customer support and sales, especially. They'll know where the pain points are, and that information combined with your other analysis and testing efforts will be extremely valuable in identifying problems.\
\
slide 23: \
[dark patterns]\
\
\
You have to work with your stakeholders to identify what constitutes a successful completion of a given task. This is what is sometimes called  a \'91win state\'92. By working with your users over time, you\'92ll begin to see how well they\'92re negotiating these key tasks, and whether or not your design is in a win state.\
\
One other thing you can do, is to learn what not to do. This is a wiki of dark patterns. It's a cautionary tale to designers.\
\
Observe the darkness, and learn what not to do and why. The best way to identify problems is to never even subject your users to them, but to learn from the work of others. The trail has been blazed ahead of you, and there\'92s a large body of work out there for us to draw from as we work to become better designers.\
\
That will take us nicely into our next section. What to do now that we've discovered all these problems.\
\
slide 23:\
[prioritizing]\
\
So we\'92ve spent a lot of time talking about how to find out what your problems are. What you might find out pretty quickly as you work through this process is that a) users are a pretty unforgiving group and this is humbling and b) you\'92ve got your work cut out for you. This is ok! Don\'92t be discouraged.\
\
slide 24\
[don't panic]\
\
The first mistake i always made as a rookie was leaping to extremes. It\'92s so easy to think, oh we have all these problems, we need to scrap this completely and start from the beginning!\
\
And that would be lovely, if we were made of time and money. But the reality many of are facing is that we have limited time and resources, and we have users who need to use our sites right now. So what do we do? How do we decide where to begin?\
\
slide 25:\
[chart]\
\
This chart, is, in my opinion, a lifesaver, and one of the great prioritization tools that I we have been given by the gods of ux.\
\
The axis range on one side from high impact to low impact- meaning, users are feeling a LOT of pain for high impact problems, or they are features or areas that have a lot of visibility. Low impact is something that isn\'92t used as much, or is mildly painful for not too terrible. Or, another way to put it is, a high impact problem is making users feel angry, frustrated, helpless, or just generally ragey when they encounter it. Low impact problems make them feel meh, or it\'92s only making a very small percentage of users feel ragey.\
\
\
The other axis is ranging from hard to fix to easy to fix. Hard to fix may be technically difficult, or it might mean that something big needs to be cleaned up, or that someone high up doesn\'92t believe that it needs to happen, whatever the case may be, it\'92s something that can\'92t happen quickly and easily.\
\
Easy to fix is pretty self-explanatory- easy to implement, doesn\'92t require you to move heaven and earth to make it happen.\
\
What I like to do is to, once i\'92ve analyzed my test results or my metrics, and i have a fairly succinct list of problem areas, is to organize them on this chart.\
\
slide 26:\
[sample problems]\
\
Let\'92s say I\'92ve conducted a study, and I now know that I have the following problems:\
\
-users can\'92t find the login link to my application from the homepage of my website\
-users are having trouble completing a major task in my application because it involves too many steps\
-the color of some links is hard for users with a certain type of colorblindness to read\
-i make users select their currency type my app instead of auto-converting things for them\
\
now we\'92re going to step through the different quadrants of the prioritization grid with this list of problems, and hopefully that will help illustrate what we\'92re doing with this thing.\
\
slide 27:\
[filled in]\
\
so here i\'92ve placed these problems according to what I think is hard and easy to implement as well as how much impact these problems are having on users. According to this analysis, the first one we\'92d always go after would be the quick wins\
\
\
Quick Wins\
\
Since these are Things that are easy to fix and will have a high impact on users are the things that you should go after them first. Adding a login link for my application from my homepage is going to be highly visible, have a fairly high impact, and will take a minimum of development resources. So clearly it\'92s a quick win.\
\
Long-term goals\
\
In this example, i\'92ve placed the problem that clearly needs some work but that doesn\'92t necessarily have one clear answer in the long term goals section, or, high impact difficult implementation. \
\
In order to solve this problem, I\'92m going to have to spend some time brainstorming with my colleagues, talking to users, and probably will propose at least 3 or 4 different solutions before we settle on one to implement.\
\
An important thing to remember is that often there is no clear answer to a problem that turns up. It can be challenging and a little nervewracking, and that\'92s ok. When you have a nebulous problem, the answer is always to do more research, and continue to break it down into smaller and smaller pieces until you get to the root of the problem.\
\
Low impact, easy fixes\
\
I\'92ve placed link color in low-impact but easy to fix because my users have reported it as mildly annoying, or not many users have seemed to have noticed it. Problems that are only noticed by a small subset of your users, but that won\'92t take a lot of resources to fix, go here. Fix them as you have time, but don\'92t sweat it. Users will appreciate your throughtfullness if you are able to get to these, but if you have bigger problems to take care of, by all means get to those first.\
\
\
Back burner\
\
We all know one of those, \'91never gonna happen\'92s\'92 when we see them. Some things are just too costly in terms of time, resources, or just generally such a pain in the neck that they\'92d better have an amazing payoff if you\'92re going to take them on. And some problems just never get more important than the \'91nice to have\'92 or \'91one or two people mentioned it\'92. in those cases, it\'92s ok to put it on the back burner. Do keep a list, you never know when these will end up being able to be fixed as part of something else, but don\'92t waste time or energy fixing these exclusively, unless you have a lot of time or available resources.\
\
\
slide 28\
[bandaid or shotgun]\
\
so you\'92ve prioritized your problems, how do you know when you need to really overhaul something, versus doing a quick fix?\
\
Well, the prioritization chart will help here too. Your long term goal sorts of problems are likely symptoms of needing some major overhaul. They wouldn\'92t be difficult to implement or hard to determine a solution for if there were any easy fixes. Get out the shotgun for these.\
\
Bandaids, however, are fine for your lightweight easy to fix problems. If you can find any easy, low-tech way to make it happen, do it.\
\
slide 29\
[iterative fixes]\
\
most problems you will encounter won\'92t be so cut and dried. if it\'92s a clear case of back to the drawing board, or quick bandaid, that would just be too easy!\
\
slide 30:\
[99% of problems]\
\
Most problems can be solved with a more moderate approach. I often go at it this way- find your ideal solution, the one that takes tons of dev time and that you probably couldn\'92t get rolled out for another month under the best of circumstances. Break it down, and figure out which pieces you can implement right now to ease the pain. \
\
Rinse and repeat. In this way, you can gradually fix the problem, while easing the burden on your users right now. This approach works well with Agile teams also. Because if your users are ragey right this moment, it\'92s hurting your business, and it\'92s hurting their blood pressure. \
\
Exercise:\
\
We're going to test a site, and come up with some things we think might be problems. (10 mins)\
\
Then we'll come back together as a group, discuss what the problems are and why we think they are problems, and try to prioritize them.\
\
slide 31:\
[getting buy-in]\
\
I hope this section might be optional for some of you, and that you\'92re clients or organizations already have complete trust in the idea of doing user-centered design, and that your path will be easy and smooth.\
\
Unfortunately, for many of us, buy-in is earned, not given, and it can be a hard-fought battle. So here are some tips to help you make your case and win.\
\
\
slide 32:\
[process document]\
\
\
I know, a process document. It sounds just UGH. But a document, no matter how brief, lends authority and substance, and it also shows in concrete steps how you intend to go about doing this thing. It also helps management understand that this is serious, grownup business.\
\
\
this is a quick, rough, process document I created at adzerk to help guide our interactions with some of our independent contractors. This is just to give you an idea of what might be included in such a document. Try to cover what you\'92re going to do, in concrete steps. \
\
slide 33:\
[start doing]\
\
After you\'92ve created your document, begin implementing it! Pick a feature, a project, a page. Just pick a beginning point, and then start doing what you can on your own. If you can get metrics up and running under your own authority, go for it. If you can start working with users and getting feedback, do it. Go ahead and start working out ways to implement user-centric strategies in your own day to day workflow. \
\
The single biggest factor in getting buy-in for this stuff is to get test results in front of people. They might not believe that its important. Or they might claim to believe it, but it\'92s not a priority because they don\'92t really really believe. With user testing, seeing is believing.\
\
\
Guerrilla  testing\
\
I\'92m going to tell you a story from the trenches. Once, I was working for a beauracractic organization that claimed that it liked the idea of UX, but wouldn\'92t devote the time and resources it needed to in order to get results.\
\
So, I conducted a series of guerrilla tests. I set up 4 remote tests on trymyui.com of 4 of our biggest competitors. The video results were extremely compelling. I set up a lunchtime viewing of some of the highlights, luring key people with food. I won over some people with my results. This took me about a weekend and a couple of free trial accounts to put together. My boss did spring for the lunches though.\
\
Whatever it takes to get actual user results in front of people, once you can successfully make it happen, something often clicks and then they \'91get it\'92.\
\
Be the evangelist\
\
sometimes it\'92s not enough to just penetrate into people\'92s brains. You need a higher level of buy-in to get included in the meetings that you need to be included in, to really get user-centric design to become a value of the project or organization. \
\
You can do this by being the evangelist. Be a broken record. Whatever parts of your process that you\'92ve gotten up and running, share your findings with anyone who will listen. Ask questions about how your UX process will fit in, which users you can talk to about something before it gets started, how the team will be working to fix issues that you\'92ve found. Because ultimately, you can run tests until you\'92re blue in the face, but you probably can\'92t fix all of an entire application\'92s issues by yourself.\
\
\
Lurk\
\
Over time, listen for footholds. If someone mentions a conversation with a client, jump on board. Would you be able to talk to the client? If someone is doing demos, can you lurk to hear what users are saying? The more you inject yourself, the more it will become natural to the team to include you, and by extension those practices in their daily workflow.\
\
Be patient\
\
Over time, it will get through! Just keep doing your thing, and sharing what you learn and how you make it better, and over time your organization, project, or team will change for the better. Processes, thinking, and ways of doing things don\'92t change over night though, so be patient.\
\
slide 34:\
[share your successes]\
\
Share your successes\
\
If you\'92ve identified and fixed a problem, share that! Make a report, send an email, host a lunch and learn, but let people know about it!\
\
If you have user quotes about something that\'92s easier to use, or heatmaps, clickmaps, or any other type of metric showing users having a higher rate of success, or video showing users having an easier time getting through, share those things!\
\
\
Story time! Has anyone tried to advocate for UX in their organization? How did it go?\
\
slide 35:\
[project management]\
\
\
We've talked about how to get buy-in from your client or organization. I've recommended a lot of one-time, warfare kinds of tactics and methods. Over time, as you integrate UX practices into your workflow, you\'92re going to need to integrate with whatever existing project management methods are already in place. Even if you don\'92t have a professed process, the odds are that you\'92ll recognize some elements of your organization in one of the 3 types we\'92re going to cover. Since UX isn\'92t traditionally incorporated into any of these processes, figuring out how to work it in can be an ongoing challenge. \
\
Honestly, this is still a struggle even for me. I've had to find my way at every single organization I've worked with. And there doesn't seem to be a single recipe for success.\
\
slide 36:\
[waterfall]\
\
Larger, more beauracratic  organizations typically tend more towards methods like waterfall because of the size of teams and projects. Different phases could represent handoff between entire departments or divisions. It\'92s hard to make changes to a project once its passed off to a different phase.\
\
\
slide 37:\
[ux for waterfall]\
\
In some ways, the waterfall method makes it a little easier to implement a UX process. All you have to do is establish a clear UX step in the workflow. This makes things a little more cumbersome, as you won\'92t necessarily be able to get fixes to problems out the door quickly, but once you\'92ve established User testing as a solid phase in the process, you can be sure it will be happening regularly.\
\
\
working in a waterfall environment has some pros and some cons. You\'92ll have more time for careful analysis, but you\'92ll also have less flexibility in rolling out fixes quickly. To help counter that, be careful about prioritizing fixes, since you have less ability to roll them out quickly.\
\
\
slide 38:\
[agile]\
\
\
agile methodology is an approach to building software that\'92s based on rapid iterations. instead of taking time out for each of the steps in the waterfall method, all of those steps happen quickly in tandem or one after the other in cycles of about 2 weeks. \
\
\
agile is really popular and is increasingly being adopted by organizations of all sizes. it seems to work best for smaller teams, in my experience, but i\'92m not a project management expert and this isn\'92t a project management course, so that\'92s neither here nor there.\
\
most of my professional life i\'92ve lived in an agile world, and it actually can be kind of challenging to figure out where ux fits in. People have written entire books about this, so we're clearly not going to be able to do more than touch on this tonight.\
\
\
slide 39:\
[ux for agile]\
\
Things can be fast and furious\
Fixes can be implemented quickly, or take more time if they\'92re larger\
Rapid turnaround times allows for real life feedback, which can decrease the need for in-depth studies before deploying\
\
slide 40:\
[lean ux]\
\
values of agile ux: \
\
Low fidelity deliverables, like paper prototypes,\
Collaborative brainstorming/design, immediate feedback from users and colleagues, and People and ideas over deliverables\
\
Questions?\
\
}